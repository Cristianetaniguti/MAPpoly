% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_from_polymapR.R
\name{import_phased_maplist_from_polymapR}
\alias{import_phased_maplist_from_polymapR}
\title{Import phased map list from polymapR}
\usage{
import_phased_maplist_from_polymapR(maplist, mappoly.data, ploidy = NULL)
}
\arguments{
\item{maplist}{a list of phased maps obtained using function 
\code{create_phased_maplist} from pacakge \code{polymapR}}

\item{mappoly.data}{a dataset used to obtain \code{maplist}, 
converted into class \code{mappoly.data}}

\item{ploidy}{the ploidy level}
}
\description{
Function to import phased map lists from polymapR
}
\examples{
\dontrun{
require(polymapR)
## Loading polymapR example
data("integrated.maplist", "screened_data3", "marker_assignments_P1","marker_assignments_P2")
maplist <- create_phased_maplist(maplist = integrated.maplist,
                                 dosage_matrix.conv = screened_data3,
                                 marker_assignment.1=marker_assignments_P1,
                                 marker_assignment.2=marker_assignments_P2,
                                 ploidy = 4)
 ## Importing polymapR dataset                                
 mappoly.data <- import_data_from_polymapR(screened_data3, 4)
 plot(mappoly.data) 
 
 ## Importing polymapR phased maplist
 mappoly.maplist <- import_phased_maplist_from_polymapR(maplist, mappoly.data)
 plot_map_list(mappoly.maplist)
 ## plot phased map
 plot(mappoly.maplist[[1]])
 ## plot a segment of phased map (from 0 to 20 cM)
 plot(mappoly.maplist[[1]], mrk.names = T, left.lim = 0, right.lim = 20, cex = .7)
 plot(mappoly.maplist[[2]])
 plot(mappoly.maplist[[3]])
 plot(mappoly.maplist[[4]])
 plot(mappoly.maplist[[5]])
 
 ## Computing conditional genotype probabilities
 genoprob <- lapply(mappoly.maplist, calc_genoprob_error, step = 1, error = 0.05)
 
 ## Computing preferential pairing profiles
 pref.pair <- calc_prefpair_profiles(genoprob)
 plot(pref.pair, min.y.prof = .25, max.y.prof = 0.4, P = "P1", Q = "P2")
 
 ## Computing homolog probabilities
 h.prob<-calc_homoprob(genoprob)
 plot(h.prob, ind = 10) ## plot haplotype of individual 10 
 
 #### Reestimating recombination fractions using HMM
 cl <- parallel::makeCluster(5)
 parallel::clusterEvalQ(cl, require(mappoly))
 parallel::clusterExport(cl,  "mappoly.data")
 reest.maps <- parallel::parLapply(cl, mappoly.maplist, 
                                   est_full_hmm_with_global_error, 
                                   error = 0.05)
 parallel::stopCluster(cl)
 
 ## Computing conditional genotype probabilities
 genoprob2 <- lapply(reest.maps, calc_genoprob_error, step = 1, error = 0.05)
 
 ## Computing preferential pairing profiles
 pref.pair2 <- calc_prefpair_profiles(genoprob2)
 plot(pref.pair2, min.y.prof = .25, max.y.prof = 0.4, P = "P1", Q = "P2")
 
 ## Computing homolog probabilities
 h.prob2<-calc_homoprob(genoprob2)
 plot(h.prob2, ind = "F1_001") 
 
 #### Reconstructing the map using MAPpoly
 s <- make_seq_mappoly(mappoly.data, "all")
 tpt <- est_pairwise_rf(input.seq = s, n.clusters = 7)
 mat <- rf_list_to_matrix(make_pairs_mappoly(tpt, s))
 grs <- group_mappoly(input.mat = mat,
                      expected.groups = 5,
                      inter = TRUE)
 grs
 LG <- vector("list", 5)
 op <- par(mfrow = c(2,3))
 for(i in 1:5){
   s.temp <-  make_seq_mappoly(grs, arg = i)
   tpt.temp <- make_pairs_mappoly(tpt, s.temp)
   sf<-rf_snp_filter(input.twopt = tpt.temp, 
                     thresh.LOD.ph = 1, 
                     thresh.LOD.rf = 1, 
                     thresh.perc = 0.02)
   M <- make_mat_mappoly(input.mat = mat, sf)
   o <- mds_mappoly(M)
   so<-make_seq_mappoly(o)
   plot(M, ord = so$seq.mrk.names, main.text = paste("LG", i), index = FALSE)
   LG[[i]] <- list(s = so, tpt = tpt.temp)
   cat("\n")
 }
 par(op) 
 MAPs <- vector("list", 5)
 for(i in 1:5){
 MAPs[[i]] <- est_rf_hmm_sequential(input.seq = LG[[i]]$s,
                                    start.set = 6,
                                    thres.twopt = 10,
                                    thres.hmm = 50,
                                    extend.tail = 30,
                                    twopt = LG[[i]]$tpt,
                                    verbose = TRUE,
                                    tol = 10e-2,
                                    tol.final = 10e-4,
                                    phase.number.limit = 20,
                                    sub.map.size.diff.limit =  5,
                                    info.tail = TRUE,
                                    reestimate.single.ph.configuration = TRUE)
 }
 cl <- parallel::makeCluster(5)
 parallel::clusterEvalQ(cl, require(mappoly))
 parallel::clusterExport(cl,  "mappoly.data")
 recons.maps <- parallel::parLapply(cl, MAPs, 
                                    est_full_hmm_with_global_error, 
                                    error = 0.05)
 parallel::stopCluster(cl)
 
 ## Computing conditional genotype probabilities
 genoprob3 <- lapply(recons.maps, 
                     calc_genoprob_error, 
                     step = 1, 
                     error = 0.05)
 
 ## Computing preferential pairing profiles
 pref.pair3 <- calc_prefpair_profiles(genoprob3)
 plot(pref.pair3, min.y.prof = .25, max.y.prof = 0.4, P = "P1", Q = "P2")
 
 ## Computing homolog probabilities
 h.prob3<-calc_homoprob(genoprob3)
 plot(h.prob, ind = "F1_030")  ## plot haplotype of individual 10 (polymapR)
 plot(h.prob2, ind = "F1_030") ## plot haplotype of individual 10 (reestimated - MAPpoly)
 plot(h.prob3, ind = "F1_030") ## plot haplotype of individual 10 (reconstructed - MAPpoly)
}

}
\references{
Bourke PM et al: (2019) PolymapR — linkage analysis and genetic map 
    construction from F1 populations of outcrossing polyploids. 
    _Bioinformatics_ 34:3496–3502.
    \url{https://doi.org/10.1093/bioinformatics/bty1002}

    Mollinari, M., and Garcia, A.  A. F. (2019) Linkage
    analysis and haplotype phasing in experimental autopolyploid
    populations with high ploidy level using hidden Markov
    models, _G3: Genes, Genomes, Genetics_. 
    \url{https://doi.org/10.1534/g3.119.400378}
}
\author{
Marcelo Mollinari \email{mmollin@ncsu.edu}
}
