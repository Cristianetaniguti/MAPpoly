% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_maps.R
\name{merge_maps}
\alias{merge_maps}
\title{Merge two maps}
\usage{
merge_maps(input.map1, input.map2, twopt, thres.twopt = 3,
  thres.hmm = 10, genoprob.map1 = NULL, phase.config.map1 = "best",
  phase.config.map2 = "best", tol = 0.001)
}
\arguments{
\item{input.map1}{an object of class \code{"mappoly.map"}. First map to be merged.}

\item{input.map2}{an object of class \code{"mappoly.map"}. Second map to be merged.}

\item{twopt}{an object of class \code{poly.est.two.pts.pairwise}
containing two-point information.}

\item{thres.twopt}{the threshold used to determine if the linkage
phases compared via two-point analysis should be considered 
for the search space reduction.}

\item{thres.hmm}{the threshold used to determine which linkage 
phase configurations should be retuned}

\item{genoprob.map1}{an object of class \code{"mappoly.genoprob"} for the first map}

\item{phase.config.map1}{which phase configuration should be used for 'input.map1' . "best" (default) 
will choose the maximum likelihood configuration.}

\item{phase.config.map2}{which phase configuration should be used for 'input.map2' . "best" (default) 
will choose the maximum likelihood configuration.}

\item{tol}{the desired accuracy.}
}
\value{
An object of class 'mappoly.map'
}
\description{
Estimates the linakge phase between to pre-built maps and creates a new map by merging them.
}
\details{
\code{merge_maps} uses two-point information, under a given LOD threshold, to reduce the 
linkage phase serach space. The remaining linkage phasaes are tested using the genotype 
probabilities.
}
\examples{
\dontrun{

#### Tetraploid example #####
map1<-get_submap(solcap.dose.map[[1]], 1:5)
map2<-get_submap(solcap.dose.map[[1]], 6:15)
full.map<-get_submap(solcap.dose.map[[1]], 1:15)
s<-make_seq_mappoly(tetra.solcap, full.map$maps[[1]]$seq.num)
counts<-cache_counts_twopt(input.seq = s, get.from.web = TRUE)
twopt <- est_pairwise_rf(input.seq = s, count.cache = counts)
genoprob.map1 <- calc_genoprob(map1)
merged.maps<-merge_maps(input.map1 = map1, 
                        input.map2 = map2, 
                        twopt = twopt,
                        thres.twopt = 3,
                        genoprob.map1 = genoprob.map1)

plot(merged.maps, mrk.names = TRUE)                       
plot(full.map, mrk.names = TRUE)                       
best.phase <- merged.maps$maps[[1]]$seq.ph
names.id<-names(best.phase$P)
plot_compare_haplotypes(m = 6,
                        hom.allele.p1 = best.phase$P[names.id],
                        hom.allele.q1 = best.phase$Q[names.id],
                        hom.allele.p2 = full.map$maps[[1]]$seq.ph$P[names.id],
                        hom.allele.q2 = full.map$maps[[1]]$seq.ph$Q[names.id])  
                        
#### Hexaploid example #####
map1<-get_submap(maps.hexafake[[1]], 1:5)
map2<-get_submap(maps.hexafake[[1]], 6:15)
full.map<-get_submap(maps.hexafake[[1]], 1:15)
s<-make_seq_mappoly(hexafake, full.map$maps[[1]]$seq.num)
counts<-cache_counts_twopt(input.seq = s, get.from.web = TRUE)
twopt <- est_pairwise_rf(input.seq = s, count.cache = counts)
genoprob.map1 <- calc_genoprob(map1)
merged.maps<-merge_maps(input.map1 = map1, 
                        input.map2 = map2, 
                        twopt = twopt,
                        thres.twopt = 3,
                        genoprob.map1 = genoprob.map1)

plot(merged.maps, mrk.names = TRUE)                       
plot(full.map, mrk.names = TRUE)                       
best.phase <- merged.maps$maps[[1]]$seq.ph
names.id<-names(best.phase$P)
plot_compare_haplotypes(m = 6,
                        hom.allele.p1 = best.phase$P[names.id],
                        hom.allele.q1 = best.phase$Q[names.id],
                        hom.allele.p2 = full.map$maps[[1]]$seq.ph$P[names.id],
                        hom.allele.q2 = full.map$maps[[1]]$seq.ph$Q[names.id])  
}

}
\author{
Marcelo Mollinari, \email{mmollin@ncsu.edu}
}
