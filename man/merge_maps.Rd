% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_maps.R
\name{merge_maps}
\alias{merge_maps}
\title{Merge two maps}
\usage{
merge_maps(
  map.list,
  twopt,
  thres.twopt = 10,
  genoprob.list = NULL,
  thres.hmm = "best",
  tol = 1e-04
)
}
\arguments{
\item{map.list}{a list of objects of class \code{mappoly.map} to be merged.}

\item{twopt}{an object of class \code{poly.est.two.pts.pairwise}
containing the two-point information}

\item{thres.twopt}{the threshold used to determine if the linkage
phases compared via two-point analysis should be considered 
for the search space reduction (default = 3)}

\item{genoprob.list}{a list of objects of class \code{mappoly.genoprob} 
containing the genotype probabilities for the maps to be merged. 
If \code{NULL} (default), the probabilities are computed.}

\item{thres.hmm}{the threshold used to determine which linkage 
phase configurations should be retuned when merging two maps.
If "best" (default), returns only the best linkage phase 
configuration.}

\item{tol}{the desired accuracy (default = 10e-04)}
}
\value{
An object of class 'mappoly.map' with the following structure:
\item{m}{the ploidy level}
\item{mrk.names}{the names of markers present in the sequence}
\item{data.name}{name of the dataset of class \code{mappoly.data}}
\item{ph.thres}{the LOD threshold used to define the linkage phase configurations to test}
\item{maps}{a list containing the sequence of markers, their recombination fractions,
the linkage phase configuration for all markers in both parents P and Q and the 
map's joint likelihood}
}
\description{
Estimates the linkage phase and recombination fraction between two pre-built maps 
and creates a new map by merging them.
}
\details{
\code{merge_maps} uses two-point information, under a given LOD threshold, to reduce the 
linkage phase search space. The remaining linkage phases are tested using the genotype 
probabilities
}
\examples{
\dontrun{
#### Tetraploid example #####
map1<-get_submap(solcap.dose.map[[1]], 1:5)
map2<-get_submap(solcap.dose.map[[1]], 6:15)
map3<-get_submap(solcap.dose.map[[1]], 16:30)
full.map<-get_submap(solcap.dose.map[[1]], 1:30)
s<-make_seq_mappoly(tetra.solcap, full.map$maps[[1]]$seq.num)
counts<-cache_counts_twopt(input.seq = s, cached = TRUE)
twopt <- est_pairwise_rf(input.seq = s, count.cache = counts)
merged.maps<-merge_maps(map.list = list(map1, map2, map3), 
                        twopt = twopt,
                        thres.twopt = 3)
plot(merged.maps$map, mrk.names = TRUE)                       
plot(full.map, mrk.names = TRUE)                       
best.phase <- merged.maps$map$maps[[1]]$seq.ph
names.id<-names(best.phase$P)
compare_haplotypes(m = 4, best.phase$P[names.id], 
                   full.map$maps[[1]]$seq.ph$P[names.id]) 
compare_haplotypes(m = 4, best.phase$Q[names.id], 
                   full.map$maps[[1]]$seq.ph$Q[names.id])
                    
#### Hexaploid example #####
map1<-get_submap(maps.hexafake[[1]], 1:5)
map2<-get_submap(maps.hexafake[[1]], 6:15)
map3<-get_submap(maps.hexafake[[1]], 16:30)
full.map<-get_submap(maps.hexafake[[1]], 1:30)
s<-make_seq_mappoly(hexafake, full.map$maps[[1]]$seq.num)
counts<-cache_counts_twopt(input.seq = s, cached = TRUE)
twopt <- est_pairwise_rf(input.seq = s, count.cache = counts)
merged.maps<-merge_maps(map.list = list(map1, map2, map3), 
                        twopt = twopt,
                        thres.twopt = 3)
plot(merged.maps$map, mrk.names = TRUE)                       
plot(full.map, mrk.names = TRUE)                       
best.phase <- merged.maps$map$maps[[1]]$seq.ph
names.id<-names(best.phase$P)
compare_haplotypes(m = 6, best.phase$P[names.id], 
                   full.map$maps[[1]]$seq.ph$P[names.id]) 
compare_haplotypes(m = 6, best.phase$Q[names.id], 
                   full.map$maps[[1]]$seq.ph$Q[names.id])
}

}
\author{
Marcelo Mollinari, \email{mmollin@ncsu.edu}
}
